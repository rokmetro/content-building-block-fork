// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/content_items": {
            "get": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Retrieves  all content items",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminGetContentItems",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coma separated IDs of the desired records",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit - limit the result",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order - Possible values: asc, desc. Default: desc",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "start_date - Start date filter in milliseconds as an integer epoch value",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end_date - End date filter in milliseconds as an integer epoch value",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "description": "body json of the all items ids that need to be filtered",
                        "name": "data",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/getContentItemsRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Creates a new content item",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminCreateContentItem",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/admin/content_items/{id}": {
            "get": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Retrieves a content item by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminGetContentItem",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Updates a content item with the specified id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminUpdateContentItem",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Deletes a content item with the specified id",
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminDeleteContentItem",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/admin/health_location/{id}": {
            "delete": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Deletes a health location with the specified id",
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminDeleteHealthLocation",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/admin/health_locations": {
            "get": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Retrieves  all health locations",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminGetHealthLocations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coma separated IDs of the desired records",
                        "name": "ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Create a new health location",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminCreateHealthLocation",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/admin/health_locations/{id}": {
            "get": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Retrieves a health location by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminGetHealthLocation",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Updates a health location with the specified id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminUpdateHealthLocation",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/admin/image": {
            "post": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Uploads an image to AWS S3",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminUploadImage",
                "parameters": [
                    {
                        "description": "path - path within the S3 bucket",
                        "name": "path",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "width - width of the image to resize. If width and height are missing - then the new image will use the original size",
                        "name": "width",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "height - height of the image to resize. If width and height are missing - then the new image will use the original size",
                        "name": "height",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "quality - quality of the image. Default: 90",
                        "name": "quality",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "fileName - the uploaded file name",
                        "name": "fileName",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/admin/student_guides": {
            "get": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Retrieves  all student guides",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminGetStudentGuides",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coma separated IDs of the desired records",
                        "name": "ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Creates a student guide item",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminCreateStudentGuide",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/admin/student_guides/{id}": {
            "get": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Retrieves  all items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminGetStudentGuide",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Updates a student guide with the specified id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminUpdateStudentGuide",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AdminUserAuth": []
                    }
                ],
                "description": "Deletes a student guide item with the specified id",
                "tags": [
                    "Admin"
                ],
                "operationId": "AdminDeleteStudentGuide",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/health_locations": {
            "get": {
                "security": [
                    {
                        "RokwireAuth": []
                    }
                ],
                "description": "Retrieves  all health locations",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "GetHealthLocations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coma separated IDs of the desired records",
                        "name": "ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/health_locations/{id}": {
            "get": {
                "security": [
                    {
                        "RokwireAuth": []
                    }
                ],
                "description": "Retrieves a health location by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "GetHealthLocation",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/image": {
            "post": {
                "security": [
                    {
                        "UserAuth": []
                    }
                ],
                "description": "Uploads an image to AWS S3",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "AdminUpdateStudentGuide",
                "parameters": [
                    {
                        "description": "path - path within the S3 bucket",
                        "name": "path",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "width - width of the image to resize. If width and height are missing - then the new image will use the original size",
                        "name": "width",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "height - height of the image to resize. If width and height are missing - then the new image will use the original size",
                        "name": "height",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "quality - quality of the image. Default: 90",
                        "name": "quality",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "fileName - the uploaded file name",
                        "name": "fileName",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/student_guides": {
            "get": {
                "security": [
                    {
                        "RokwireAuth": []
                    }
                ],
                "description": "Retrieves  all student guides",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "GetStudentGuides",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coma separated IDs of the desired records",
                        "name": "ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/student_guides/{id}": {
            "get": {
                "security": [
                    {
                        "RokwireAuth": []
                    }
                ],
                "description": "Retrieves a student guide by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "GetStudentGuide",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/twitter/users/{user_id}/tweets": {
            "get": {
                "security": [
                    {
                        "RokwireAuth": []
                    }
                ],
                "description": "Retrieves Twitter tweets for the specified user id. This API is intended to be invoked with the original Twitter query params to https://api.twitter.com/2/users/%s/tweets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "GetTweeterPosts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "Gives the service version.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "Version",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "getContentItemsRequestBody": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "AdminGroupAuth": {
            "type": "apiKey",
            "name": "GROUP",
            "in": "header"
        },
        "AdminUserAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header (add Bearer prefix to the Authorization value)"
        },
        "RokwireAuth": {
            "type": "apiKey",
            "name": "ROKWIRE-API-KEY",
            "in": "header"
        },
        "UserAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header (add Bearer prefix to the Authorization value)"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.8",
	Host:        "localhost",
	BasePath:    "/content",
	Schemes:     []string{"https"},
	Title:       "Rokwire Content Building Block API",
	Description: "Rokwire Content Building Block API Documentation.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
